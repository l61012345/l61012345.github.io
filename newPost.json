{"title":"遗传编程（GP）导论","id":"2022/01/13/遗传算法/遗传编程导论/","date_published":"01/13/2022","summary":"遗传编程导论\nGennetic Programming,John R. Koza,Riccardo Poli,Search Methodologies—Introductory Tutorials in Optimization and Decision Support Techniques, 2005.\n\n术语遗传编程（Gennetic Progamming）是一种针对复杂目标问题，基于对需求高层级下的描述，使用计算机描述自动给出的最优解的算法。具体而言，遗传编程通过应用类似于自然界基因遗传的规律，对一组程序（Programs）进行筛选和迭代，最终生成对目标问题解决效果最好的程序。  \n个体的描述和表达与遗传算法不同的是，遗传编程中不再像遗传算法那样使用固定长度的字符串（Strings）和线性结构来描述一个个体。而是通过程序（Program）和树形结构（称为语法树，Syntax trees）来编码可能的系统解决方法。  \n\n            遗传编程中，一个程序可以理解为是可以被符号化和流程化的一个类（item），它可以是一个特征，也可以是目标问题的一种解决问题的策略。  \n          \n这样编码方式使得对个体的描述能够更加准确，同时进行遗传操作时对个体的变化也更大。比如：  \nmax(x*x,x+3*y)可以被树形化为：  \n如上图所示，语法树由众多的节点（nodes）和节点之间的连接（links）组成，一个程序可以由语法树来描述其成分和执行流程，一个节点表示一个操作，在数学中可以理解为运算符，而连接可以表示某个节点与操作对象的对应关系，在数学中可以理解为运算数（Operand）。一个基本的语法树包括如下的成分：  ","url":"https://l61012345.top/2022/01/13/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%AE%BA/","tags":[],"categories":["遗传算法"]}